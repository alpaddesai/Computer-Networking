<Window x:Name="ComputerNetworking" x:Class="ComputerNetworking.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ComputerNetworking"
        mc:Ignorable="d"
        Title="Computer Networking" Height="697.286" Width="1239.179" MaxWidth="1239" MaxHeight="697">
    <Grid Margin="0,0,2,8">
        <Grid.RowDefinitions>
            <RowDefinition Height="161*"/>
            <RowDefinition Height="615*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="251*"/>
            <ColumnDefinition Width="788*"/>
        </Grid.ColumnDefinitions>
        <Label Content="Reference : Handbook of Serial Communication Interfaces, 2015" HorizontalAlignment="Left" Margin="38,482,0,0" VerticalAlignment="Top" Height="24" Width="352" Grid.Row="1" Grid.Column="1"/>
        <RichTextBox HorizontalAlignment="Left" Height="602" Margin="9,12,0,0" VerticalAlignment="Top" Width="904" TextChanged="RichTextBox_TextChanged" Grid.RowSpan="2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.Column="1">
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Basic concepts of serial I/O Communications"/>
                    <Run Text=" "/>
                    <Run Text=":  The maximum speed achievable by a serial link is directly proportional to the transmission medium. Transmission mediums range from transmission lines to fiber optic links. Fiber Optic cables: Data is transmitted by converting serial binary data to on-off light pulses generated by a transducer that propagates down  the center of the optical path. These light pulses are then converted back to electrical pulses at the receiving end by a light detector. Fiber optic cables use the fastest forms of serial data transmission, they can carry data at rates exceeding 100Gb/s, the fiber optic cables do display the same ISI problems as transmission lines.  Rise time = 0.35/BW, where the data path is a low pass filter.  Hartley's law says that the channel capacity or data rate is twice the channel bandwidth (B). The data rate is apprx. R=C= 0.5tb, where B is the -3db point of the path.  If the bandwidth ( -3db point of the low pass filter of the data path is 6Mhz) the maximum data rate is 12Mb/s.  The real data rate can be expressed in the Shannon-Hartley theorem C=B*log2(1+S/N).  C is the data rate in b/s and B is the channel bandwidth in Hz, S is the signal power and N is the noise power in watts.   Because of the Shannon Hartley theorem the rule of thumb is that the bandwidth of a circuit or transmission medium should be five to ten times the data to allow margin for the various harmonics shown in the equation above. The equation is also impacted by the # of bits transmitted per symbol. A symbol can be described by variations in voltage, phase and frequency within a modulation scheme. Multiple voltage levels allows more bits to be transmitted in the same bandwidth.  A pulse amplitude modulation (PAM) scheme called PAM4 uses 4 voltage levels where each level transmits two bits. Each voltage level is called a symbol. The bit rate is twice the symbol rate. This scheme is the basis for the tapped active filter equalization scheme on the receiver side.   Line encodings include NRZ and RZ. Other line encodings include Manchester or biphase encoding which is one more line coding method, this means that a binary 1 (positive pulse) is represented at 1/2 the bit time and a binary 0 (negative pulse) for the remainder of the bit time.    The advantage of this scheme is that there is voltage transition at the center of each bit which facilitates clock recovery. Hence bipolar RZ and manchester formats are preferred for clock recovery."/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Asynchronous transmission:  "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="The serial data is transmitted one binary word at a time, because of the start and stop bits the transmission is very reliable but inefficient. The trade-off is reliability versus speed.  Example of asynchronous transmission is the Universal asynchronous receiver transmitter or UART. Data to be transmitted is transmitted to the UART over a parallel bus and then stored temporarily in a buffer memory. It is then sent to another buffer register over the UARTs internal bus, then it is sent to a shift register where the start, stop and parity bits are added. An asynchronous clock then transmits the word serially in NonReturnZero format."/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Synchronous transmission: "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="It removes the overhead of the start and stop bits and eliminates or minimizes synchronous transmission. Each data word is transmitted directly one after the other in a block where the beginning or the end is defined by selected bits or words. Digital counters count the bits and words and hence keep track of the word boundaries.  The word boundaries are critical because the data is transmitted in blocks or frames of words and special fields define the beginning and end of each frame.  Hence overhead is also present in synchronous transmission due to the packet overhead."/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Clock and data recovery: "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="A clock signal is required to transmit and receive data.  The transmit and receiving units can have their own clock sources, these clocks are equal in frequency and duty cycle but not synchronized. The format of the data and the timing is such that minor differences are neglected. This is an example of asynchronous data transmission.  A second method for the transmitter is to provide the same clock signal to the receiver over a separate wire, the trade-off is perfect synchronization versus a separate data path. In the third method the receiver extracts the clock from the transmitted data.  The manchester type encoding is most commonly utilized for clock recovery because of the voltage transition at half bit.  Because the data signals have a sufficient number of transitions the receiving units can reconstitute the clock , this is called clock and data recovery (CDR).  This is the most efficient design for high speed circuits since it removes discrepancies in the clock sources that exist in the other two methods.   The critical aspect of the SERDES is to synchronize the clocks at the transmitter and receiver and this achieved through clock and data recovery (PLL) mechanism. An example is the PLL.  A critical aspect of the PLL is that it functions as a 2x multiplier because the input frequency is one half the bit rate since there is one bit per half cycle of the signal.  The output of the PLL produces one clock pulse per bit.  The clock signal is then further conditioned as needed and then used to drive the other circuits as needed. Hence there is a divide by two circuit in the feedback path to match the input frequency of the receiving clock.  Other PLL techniques to ensure accurate clock recover includes phase detector, edge detection and line coding methods as well as data encoding"/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Modulation : "/>
                    <Run Text="Spread spectrum allows multiple signals to share the same spectrum space. The direct sequence spread spectrum (DSSS aka CDMA) and frequency hoping spread spectrum (FHSS).  The serial data to to be transmitted is XOR'd with a higher data rate coded word which called the chipping signal. This signal comes form the pseudorandom code generator.  The resulting XOR output signal is then used to modulate the carrier with BPSK (binary phase shifting key  modulation) , QPSK and some form of QAM. (Quadrature Amplitude modulation). The random code spreads the  modulation bandwidth over a wide frequency. The receiver must know the code to recover the signal over the assigned bandwidth.  Besides the standard Amplitude (ASK), frequency (FSK) and phase modulation (PSK) techniques, the Quadrature Amplitude Modulation (QAM) is a composite of both ASK and PSK. It modulates or processes two bits a t time, each bit of the two bit sequence phase modulates with the carrier signal.  Overall effect is higher data rates in the same bandwidth."/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Button x:Name="Protocols" Content="Protocol" HorizontalAlignment="Left" Margin="84,416,0,0" VerticalAlignment="Top" Width="76" Height="26" Click="Protocols_Click" Grid.Row="1" RenderTransformOrigin="0.556,0.846"/>
        <Label Content="LOW SPEED INTERFACES (0-10 Mb/s)" HorizontalAlignment="Left" Margin="41,6,0,0" VerticalAlignment="Top"/>
        <Button x:Name="I2C_Bus" Content="Inter-integrated circuit Bus (I2C)" HorizontalAlignment="Left" Margin="41,41,0,0" VerticalAlignment="Top" Width="177" Click="I2C_Bus_Click"/>
        <Button x:Name="RS_232" Content="RS232" HorizontalAlignment="Left" Margin="86,66,0,0" VerticalAlignment="Top" Width="75" Click="RS_232_Click" RenderTransformOrigin="0.507,0.25"/>
        <Button x:Name="IO_link" Content="PMBus" HorizontalAlignment="Left" Margin="86,91,0,0" VerticalAlignment="Top" Width="75" Click="IO_link_Click"/>
        <Label Content="MEDIUM SPEED INTERFACE ( 10Mb/s to 1Gb/s)" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Top" Width="259" Grid.Row="1"/>
        <Button x:Name="Ethernet" Content="Ethernet" HorizontalAlignment="Left" Margin="86,31,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="Ethernet_Click"/>
        <Button x:Name="JTAG" Content="JTAG" HorizontalAlignment="Left" Margin="86,56,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="JTAG_Click"/>
        <Button x:Name="SPI" Content="SPI" HorizontalAlignment="Left" Margin="86,81,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="SPI_Click" RenderTransformOrigin="0.493,-0.3"/>
        <Button x:Name="USB" Content="USB" HorizontalAlignment="Left" Margin="86,106,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="USB_Click"/>
        <Label Content="HIGH SPEED INTERFACES ( 1 to 100 Gb/s)" HorizontalAlignment="Left" Margin="28,131,0,0" Grid.Row="1" VerticalAlignment="Top" Width="232"/>
        <Button x:Name="GE" Content="Gigabit Ethernet" HorizontalAlignment="Left" Margin="72,162,0,0" Grid.Row="1" VerticalAlignment="Top" Width="107" Click="GE_Click"/>
        <Button x:Name="Fibre_Channel" Content="Fibre Channel" HorizontalAlignment="Left" Margin="72,187,0,0" Grid.Row="1" VerticalAlignment="Top" Width="107" Click="Fibre_Channel_Click"/>
        <Button x:Name="PCIe" Content="PCIe Express" HorizontalAlignment="Left" Margin="72,212,0,0" Grid.Row="1" VerticalAlignment="Top" Width="107" Click="PCIe_Click"/>
        <Button x:Name="RapidIO" Content="RapidIO" HorizontalAlignment="Left" Margin="86,237,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="RapidIO_Click"/>
        <Button x:Name="LVDS" Content="LVDS" HorizontalAlignment="Left" Margin="86,262,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="LVDS_Click"/>
        <Button x:Name="Broadband_Interface_Concepts" Content="UART" HorizontalAlignment="Left" Margin="101,116,0,0" VerticalAlignment="Top" Width="48" RenderTransformOrigin="3.854,-11.45" Click="Broadband_Interface_Concepts_Click"/>
        <Label Content="WIRELESS INTERFACES" HorizontalAlignment="Left" Margin="55,291,0,0" Grid.Row="1" VerticalAlignment="Top" Width="135"/>
        <Button x:Name="Bluetooth" Content="Bluetooth" HorizontalAlignment="Left" Margin="85,327,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="Bluetooth_Click"/>
        <Button x:Name="WiFi" Content="WiFi" HorizontalAlignment="Left" Margin="87,356,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="WiFi_Click" RenderTransformOrigin="0.36,0.65"/>
        <Button x:Name="ZigBee" Content="ZigBee" HorizontalAlignment="Left" Margin="84,385,0,0" Grid.Row="1" VerticalAlignment="Top" Width="75" Click="ZigBee_Click" RenderTransformOrigin="0.56,0.45"/>
        <Button x:Name="Internet_Protocol" Content="Internet Protocol" HorizontalAlignment="Left" Margin="75,462,0,0" Grid.Row="1" VerticalAlignment="Top" Width="96" Height="24" Click="Internet_Protocol_Click"/>
        <Label Content="Reference: Interfacing PIC microcontrollers, 2nd edition 2013" Grid.Column="1" HorizontalAlignment="Left" Margin="466,482,0,0" Grid.Row="1" VerticalAlignment="Top" Width="343"/>

    </Grid>
</Window>
